/**
 * CCCS
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Submission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Submission'));
  } else {
    // Browser globals (root is window)
    if (!root.Cccs) {
      root.Cccs = {};
    }
    root.Cccs.SubmissionsApi = factory(root.Cccs.ApiClient, root.Cccs.Submission);
  }
}(this, function(ApiClient, Submission) {
  'use strict';

  /**
   * Submissions service.
   * @module api/SubmissionsApi
   * @version 0.1
   */

  /**
   * Constructs a new SubmissionsApi. 
   * @alias module:api/SubmissionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiSubmissionCreate operation.
     * @callback module:api/SubmissionsApi~apiSubmissionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a submission
     * @param {String} id The unique identifer for an Object (i.e. User, Task, Project, Submission etc)
     * @param {Object} opts Optional parameters
     * @param {module:model/Submission} opts.project 
     * @param {module:api/SubmissionsApi~apiSubmissionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    this.apiSubmissionCreate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['project'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSubmissionCreate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submission;

      return this.apiClient.callApi(
        '/submissions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSubmissionDelete operation.
     * @callback module:api/SubmissionsApi~apiSubmissionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a submission
     * @param {String} id The unique identifer for an Object (i.e. User, Task, Project, Submission etc)
     * @param {module:api/SubmissionsApi~apiSubmissionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiSubmissionDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSubmissionDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSubmissionGet operation.
     * @callback module:api/SubmissionsApi~apiSubmissionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Submission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single submission
     * @param {module:api/SubmissionsApi~apiSubmissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Submission>}
     */
    this.apiSubmissionGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submission];

      return this.apiClient.callApi(
        '/submissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSubmissionGetOne operation.
     * @callback module:api/SubmissionsApi~apiSubmissionGetOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Submission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single submission
     * @param {String} id The unique identifer for an Object (i.e. User, Task, Project, Submission etc)
     * @param {module:api/SubmissionsApi~apiSubmissionGetOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Submission}
     */
    this.apiSubmissionGetOne = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSubmissionGetOne");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Submission;

      return this.apiClient.callApi(
        '/submission/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSubmissionPut operation.
     * @callback module:api/SubmissionsApi~apiSubmissionPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify/Create a submission
     * @param {String} id The unique identifer for an Object (i.e. User, Task, Project, Submission etc)
     * @param {Object} opts Optional parameters
     * @param {module:model/Submission} opts.project 
     * @param {module:api/SubmissionsApi~apiSubmissionPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiSubmissionPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['project'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSubmissionPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
